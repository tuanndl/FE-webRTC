{"version":3,"sources":["routes/CreateRoom.js","routes/Room.js","App.js","serviceWorker.js","index.js"],"names":["CreateRoom","props","onClick","id","uuid","history","push","Container","styled","div","StyleVideo","video","Video","audio","ref","useRef","useEffect","peer","on","stream","current","srcObject","playsInline","autoPlay","videoConstraints","height","window","innerHeight","width","innerWidth","Room","useState","peers","setPeers","socketRef","useVideo","peersRef","roomID","match","params","io","connect","navigator","mediaDevices","getUserMedia","then","emit","user","console","log","forEach","userID","userToSignal","callerID","Peer","initiator","trickle","signal","createPeer","peerID","data","incomingSignal","addPeer","users","find","y","error","muted","map","index","key","App","path","exact","component","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.100e028e.chunk.js","sourcesContent":["import React from \"react\";\nimport { v1 as uuid } from \"uuid\";\n\nconst CreateRoom = (props) => {\n    function create() {\n        const id = uuid();\n        props.history.push(`/room/${id}`);\n    }\n\n    return (\n        <button onClick={create}>Create room</button>\n    );\n};\n\nexport default CreateRoom;\n","import React, { useEffect, useRef, useState } from 'react';\nimport io from 'socket.io-client';\nimport Peer from 'simple-peer';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  padding: 20px;\n  display: flex;\n  height: 100vh;\n  width: 90%;\n  margin: auto;\n  flex-wrap: wrap;\n`;\n\nconst StyleVideo = styled.video`\n  height: 40%;\n  width: 50%;\n`;\nconst StyledAudio = styled.audio`\n  height: 40%;\n  width: 50%;\n`;\n\nconst Video = (props) => {\n  const ref = useRef();\n  useEffect(() => {\n    props.peer.on('stream', (stream) => {\n      ref.current.srcObject = stream;\n    });\n  }, []);\n\n  return <StyleVideo playsInline autoPlay ref={ref} />;\n};\n\nconst videoConstraints = {\n  height: window.innerHeight / 2,\n  width: window.innerWidth / 2,\n};\n\nconst Room = (props) => {\n  const [peers, setPeers] = useState([]);\n  const socketRef = useRef();\n  const useVideo = useRef();\n  const peersRef = useRef([]);\n  const roomID = props.match.params.roomID;\n\n  useEffect(() => {\n    try {\n      socketRef.current = io.connect('/');\n      navigator.mediaDevices\n        .getUserMedia({ video: videoConstraints, audio: true })\n        .then((stream) => {\n          useVideo.current.srcObject = stream;\n          //   console.log(useAudio);\n          socketRef.current.emit('join room', roomID);\n          socketRef.current.on('all users', (user) => {\n            console.log(user);\n\n            const peers = [];\n            user.forEach((userID) => {\n              const peer = createPeer(userID, socketRef.current.id, stream);\n              peersRef.current.push({ peerID: userID, peer });\n              peers.push(peer);\n              setPeers([...peers]);\n            });\n          });\n\n          socketRef.current.on('user joined', (data) => {\n            const peer = addPeer(data.signal, data.callerID, stream);\n            peersRef.current.push({\n              peerID: data.callerID,\n              peer,\n            });\n            setPeers((users) => [...users, peer]);\n          });\n\n          socketRef.current.on('receiving returned signal', (data) => {\n            const item = peersRef.current.find((y) => y.peerID === data.id);\n            item.peer.signal(data.signal);\n          });\n        });\n    } catch (error) {\n      console.log(error);\n    }\n  }, []);\n\n  function createPeer(userToSignal, callerID, stream) {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream,\n    });\n\n    peer.on('signal', (signal) => {\n      socketRef.current.emit('sending signal', {\n        userToSignal,\n        callerID,\n        signal,\n      });\n    });\n\n    return peer;\n  }\n\n  function addPeer(incomingSignal, callerID, stream) {\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream,\n    });\n\n    peer.on('signal', (signal) => {\n      socketRef.current.emit('returning signal', { signal, callerID });\n    });\n\n    peer.signal(incomingSignal);\n\n    return peer;\n  }\n\n  return (\n    <Container>\n      <StyleVideo muted ref={useVideo} autoPlay playsInline />\n      {peers.map((peer, index) => {\n        return <Video key={index} peer={peer} />;\n      })}\n    </Container>\n  );\n};\n\nexport default Room;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport CreateRoom from \"./routes/CreateRoom\";\nimport Room from \"./routes/Room\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" exact component={CreateRoom} />\n        <Route path=\"/room/:roomID\" component={Room} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}